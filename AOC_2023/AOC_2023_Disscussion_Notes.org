:PROPERTIES:
#+TITLE: AOC 2023 notes
#+AUTHOR: Shiva

* Day 1

** Part 1
It is simple parsing.

** Part 2
For 1 line in the dataset, check for each character if it corresponds to the wordsToNumbers dictionary. If they match, replace it with number. Loop for all lines.
Next, perfom the same parsing as done in Part 1.

* Day 2

** Part 1
It is simple parsing but need to identify how to parse through string and number.

** Part 2
Very simple calculation.
#+begin_src C++
r_count = std::max(r_count, x);
#+end_src
The above code is the most important snippet to take note of.

** Code Refernces
1. https://github.com/tbeu/AdventOfCode/blob/master/2023/day02/day02.cpp

* Day 3

** Part 1
** Part 2

* Day 4

** Part 1
Very simple parsing. use string stream to parse string, number using space as the delimiter character.

** Part 2
#+begin_src C++
std::vector<uint32_t> cards(lines.size(), 1);
#+end_src
The default value is 1 because we need to count the original card which is itself too.

* Day 5

** Part 1
** Part 2

* Day 6
** Part 1
    Honestly, today was quite simple. It is just parsing for the first few steps. Then simple iteration over a few values to check if it exceeds the record.
** Part 2
    The second part is very simple to the first except we have to deal with very large numbers. 

* Day 7
** Part 1
    Parse the input using available C functions such as fropen() and fscanf(). Firstly, get the type of each hand, then proceed to sort them, calculate and return the score.
** Part 2
    In the get_type, replace the character 'J' with total number of 'J' values. this is actually quite clever. Then in the cmp_hand(), chooser the correct order.
* Day 8
** Part 1
Form a directed graph for all the nodes. Pass through all the nodes and count the number of steps.
** Part 2
Same as part 1 but place a for loop to run through all nodes where 'A' is the last character. Then, using 2 values of steps, get the LCM. Get the answer for part 2.

* Day 9
** Part 1

** Part 2

* Day 10

** Part 1

** Part 2

* Day 11

** Part 1

** Part 2


* Day 12
** Part 1


** Part 2

* Day 13
** Part 1

** Part 2
* Day 14
** Part 1

** Part 2
* Day 15
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
* Day 9
** Part 1

** Part 2
